name: CI/CD Pipeline Xkorin

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositories
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Build and Push Docker Image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t nkot20/xkorin-backend:latest .
          docker push nkot20/xkorin-backend:latest
          tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *
      - name: Store artefact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download deployment artefact
        uses: actions/download-artifact@v2
        with:
          name: app-build

      - name: Create artifact directory
        run: mkdir -p artifact

      - name: Extract files
        run: tar -xzf ${{ github.sha }}.tar.gz -C .

      - name: Drop zip and tar files
        run: rm ${{ github.sha }}.tar.gz

      - name: Copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          port: ${{ secrets.DEPLOY_PORT }}
          source: .
          target: ${{ secrets.DEPLOY_PATH }}
          overwrite: true
          debug: true
          
      - name: SSH into the server and deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            docker-compose pull app
            docker-compose up -d
